#!/bin/bash

# A bash script to package a python virtualenv into a transportable
# file that can be moved to another machine and file system.
#
# Copyright Mark Betz, All Rights Reserved
#
#
# Project home page: https://github.com/Markbnj/venvpack

version="0.1.0-beta"
venv_root="${VIRTUALENVWRAPPER_HOOK_DIR}/"
venv=
venv_file=
project_path=
project_dir=
project_base=
out_file=
debug=false
restore=false
force=false
cwd=$(pwd)
no_prompt=false
venv_path_placer="##VENVPACK_VENV##"
project_path_placer="##VENVPACK_PROJ##"
tmp_dir=
no_clean_on_err=false

show_help() {
    echo "venvpack ${version}"
    echo
    echo "USAGE: venvpack [OPTION]... [TARGET]"
    echo
    echo "Package a python virtualenv into a single transportable file that"
    echo "can be moved between file systems."
    echo
    echo "In the normal mode of operation the script packages a virtualenv into"
    echo "a single file, and TARGET refers to the virtual env name. If TARGET is"
    echo "not supplied the current active virtualenv, if any, is packaged."
    echo
    echo "If the -o|--outfile option is not supplied the output file will be"
    echo "given the same name as the source virtualenv."
    echo
    echo "When the -r|--restore option is used to restore a virtualenv TARGET"
    echo "is the path and name of the .venv file, and is required."
    echo
    echo "Example:"
    echo "    venvpack testenv"
    echo
    echo "Packages the testenv virtualenv into 'testenv.venv' in the current"
    echo "working directory."
    echo
    echo "Example:"
    echo "    venvpack --restore testenv.venv"
    echo
    echo "Restores the packaged virtualenv in testenv.venv into the local"
    echo "filesystem."
    echo
    echo "Options:"
    printf "\t-c, --no-cleanup-on-error\t\tDo not remove temporary files on error.\n"
    printf "\t-d, --debug\t\t\t\tPrint diagnostic information after packaging.\n"
    printf "\t-f, --force\t\t\t\tForce restoring even if architecture check fails.\n"
    printf "\t-o, --outfile=PATH\t\tSpecify the output file name and path.\n"
    printf "\t-r, --restore\t\t\tRestore a packaged virtualenv.\n"
    printf "\t-y, --no-prompt\t\t\tDo not prompt for confirmation before building.\n"
    echo
    if [ ! -z "${1}" ]; then
        exit $1
    else
        exit 0
    fi
}

# check to make sure the external commands that we're going to use are
# installed. Other than docker the rest of these should be available on
# any system that has bash, but its possible this gets run inside a
# minimal container or something, and in any case might as well check.
ensure_prereqs() {
    if ! hash getopt 2>/dev/null; then
        echo "Error: 'getopt' command not found."
        echo "This program requires GNU getopt to be installed."
        echo "See http://linux.die.net/man/1/getopt for more information."
        exit 1
    fi
    if ! hash tar 2>/dev/null; then
        echo "Error: 'tar' command not found."
        echo "This program requires tar to be installed."
        echo "See http://linux.die.net/man/1/tar for more information."
        exit 1
    fi
    if ! hash gzip 2>/dev/null; then
        echo "Error: 'gzip' command not found."
        echo "This program requires gzip to be installed."
        echo "See http://linux.die.net/man/1/gzip for more information."
        exit 1
    fi
    if ! hash grep 2>/dev/null; then
        echo "Error: 'grep' command not found."
        echo "This program requires grep to be installed."
        echo "See http://linux.die.net/man/1/grep for more information."
        exit 1
    fi
    if ! hash sed 2>/dev/null; then
        echo "Error: 'sed' command not found."
        echo "This program requires sed to be installed."
        echo "See http://linux.die.net/man/1/sed for more information."
        exit 1
    fi
}

# check to be sure we were passed a valid venv, otherwise detect
# the current active venv, set venv to the full path to the environment
ensure_venv() {
    if [ "${restore}" = "true" ]; then
        if [ ! -d "${venv_root}" ]; then
            echo "Error: VIRTUALENVWRAPPER_HOOK_DIR does not point to the virtualenv root."
            echo "Check that virtualenv is installed for this user."
            exit 1
        fi
        if [ -d "${venv_root}${venv}" ]; then
            echo "Error: virtualenv ${venv_root}${venv} already exists."
            exit 1
        fi
        if [ -d "${out_file}" ]; then
            project_base=${out_file}
        elif [ -d "${PROJECT_HOME}" ]; then
            project_base=${PROJECT_HOME}
        else
            echo "Error: PROJECT_HOME is unset or does not point to a valid directory."
            echo "Use the --outfile option to set the project base path."
            exit 1
        fi
        project_path=${project_base}/${project_dir}
        if [ -d "${project_path}" ]; then
            echo "Error: project ${project_path} already exists."
            exit 1
        fi
    else
        if [ ! -z "${venv}" ]; then
            if [ ! -d "${venv_root}${venv}" ]; then
                echo "Error: virtual env '${venv}' not found at ${venv_root}"
                exit 1
            fi
        else
            if [ -z "${VIRTUAL_ENV}" ]; then
                echo "Error: virtual env not specified and no active virtual environment"
                echo "found."
                echo
                show_help 1
            else
                venv=$(basename ${VIRTUAL_ENV})
            fi
        fi
        # get the project directory from the virtualenv
        project_path=$( cat ${venv_root}${venv}/${VIRTUALENVWRAPPER_PROJECT_FILENAME} )
        if [ -z "${project_path}" ]; then
            echo "Error: could not find project home for env $venv"
            exit 1
        fi
        project_dir=$( basename ${project_path} )
        project_base=$( dirname ${project_path} )
    fi
}

# gets the project and venv names from the file we're restoring.
get_names_from_file() {
    files=($( tar --list -f ${venv_file} ))
    if [ ${#files[@]} -gt 0 ]; then
        for file in ${files[@]}; do
            if [[ ${file} == *.sys.tar ]]; then
                name_split=($(echo ${file} | tr "." "\n"))
                venv=${name_split[0]}
                unset name_split
            else
                name_split=($(echo ${file} | tr "." "\n"))
                project_dir=${name_split[0]}
                unset name_split
            fi
        done
    else
        echo "Error: could not list files in ${venv_file}. File may be corrupt or path may be incorrect."
        exit 1
    fi
}

# when restoring, performs a check after the virtualenv has been
# unpacked into temp, looking at the symlinks in lib/ to be sure
# that they are resolvable. If not, and if the --force option is
# not used, the script exits with an error.
check_architecture() {
    echo "Checking python installation compatibility ..."
    local check_path=${tmp_dir}/${venv}/lib
    local target=
    local missing=false
    pydirs=($(find ${check_path} -maxdepth 1 -type d -exec echo {} \;))
    for pydir in ${pydirs[@]}; do
        if [[ ${pydir} = *python* ]]; then
            pyfiles=($(find ${pydir} -type l -exec echo {} \;))
            for pyfile in ${pyfiles[@]}; do
                if [ ! -f ${pyfile} ] && [ ! -d ${pyfile} ]; then
                    target=$(readlink -m ${pyfile})
                    echo "Warning: link $pyfile should target ${target} but the file/directory is missing."
                    missing=true
                fi
            done
        fi
    done
    if [ "${missing}" = "true" ]; then
        echo "Warning: the virtualenv links to one or more core python files that are missing."
        if [ "${force}" = "true" ]; then
            echo "--force option in effect; continuing restore of ${venv}."
        else
            echo "Aborting restore of ${venv}. Use the --force option to force restore."
            conditional_cleanup_on_error
            exit 1
        fi
    else
        echo "System python install is compatible with virtualenv ${venv}."
    fi
}

# the normal behavior of the script is to clean up after itself on
# error, removing any temporary files or partially reconstructed
# venv, etc. This function handles that conditionally based on
# current settings.
conditional_cleanup_on_error() {
    if [ -d "${tmp_dir}" ]; then
        if [ "${no_clean_on_err}" = "false" ]; then
            echo "Removing temporary files in ${tmp_dir} ..."
            if $(rm -rf ${tmp_dir}); then
                echo "Temporary files removed."
            else
                echo "Warning: unable to remove ${tmp_dir}"
            fi
        else
            echo "Leaving temporary files in ${tmp_dir}."
        fi
    fi
    if [ "${restore}" = "true" ]; then
        if [ -d "${venv_root}${venv}" ]; then
            if [ "${no_clean_on_err}" = "false" ]; then
                echo "Removing virtualenv files in ${venv_root}${venv} ..."
                if $(rm -rf ${venv_root}${venv}); then
                    echo "virtualenv files removed."
                else
                    echo "Warning: unable to remove ${venv_root}${venv}"
                fi
            else
                echo "Leaving virtualenv files in ${venv_root}${venv}."
            fi
        fi
        if [ -d "${project_path}" ]; then
            if [ "${no_clean_on_err}" = "false" ]; then
                echo "Removing project files in ${project_path} ..."
                if $(rm -rf ${project_path}); then
                    echo "Project files removed."
                else
                    echo "Warning: unable to remove ${project_path}"
                fi
            else
                echo "Leaving project files in ${project_path}."
            fi
        fi
    fi
}

# creates a .venv archive file from a virtualenv python project
pack_venv() {
    # get some temporary working space
    tmp_dir=$(mktemp -d)
    if [ ! -d "${tmp_dir}" ]; then
        echo "Error: could not get temporary directory to work in."
        exit 1
    fi

    # since we will not patch anything in the project files just tar them right
    # into the temp folder
    if [ -d "${project_path}" ]; then
        echo "Packing ${project_path} to ${tmp_dir} ..."
        if $( tar --directory=${project_path}/.. -cf ${tmp_dir}/${project_dir}.tar ./${project_dir} --exclude=*.pyc ); then
            echo "${project_path} complete"
        else
            echo "Error: failed to archive ${project_path} to ${tmp_dir}/${project_dir}; check directory and file permissions."
            conditional_cleanup_on_error
            exit 1
        fi
    else
        echo "Warning: ${project_path} not found; skipping"
    fi

    # now stage the venv files to tmp so we can patch the paths with a
    # placeholder
    echo "Copying ${venv_root}${venv} to ${tmp_dir} ..."
    if $( tar -c --directory=${venv_root} ./${venv} --exclude=*.pyc | tar -x --directory=${tmp_dir} ); then
        echo "${venv_root}${venv} copied."
    else
        echo "Error: failed to copy ${venv_root}${venv} to ${tmp_dir}; check directory and file permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    # patch the paths
    echo "Patching paths in ${tmp_dir}/${venv} ..."
    files=$( grep ${venv_root} -l --recursive --exclude=*.pyc ${tmp_dir}/${venv} )
    for file in $files; do
        echo "Patching ${file} ..."
        if $(sed -i"" -e "s:${venv_root}:${venv_path_placer}:g" ${file}); then
            echo "${file} patched."
        else
            echo "Error: could not patch ${file}."
            conditional_cleanup_on_error
            exit 1
        fi
    done
    files=$( grep ${project_base} -l --recursive --exclude=*.pyc ${tmp_dir}/${venv} )
    for file in $files; do
        echo "Patching ${file} ..."
        if $(sed -i"" -e "s:${project_base}:${project_path_placer}:g" ${file}); then
            echo "${file} patched."
        else
            echo "Error: could not patch ${file}."
            conditional_cleanup_on_error
            exit 1
        fi
    done

    # tar into temp directory
    echo "Packing ${tmp_dir}/${venv} to ${tmp_dir} ..."
    if $( tar --directory=${tmp_dir} -cf ${tmp_dir}/${venv}.sys.tar ./${venv} ); then
        echo "${tmp_dir}/${venv} complete"
        echo "Removing temporary files ..."
        if $(rm -rf ${tmp_dir}/${venv}); then
            echo "Temporary files in ${tmp_dir}/${venv} removed"
        else
            echo "Warning: unable to remove staging folder ${tmp_dir}/${venv}"
        fi
    else
        echo "Error: failed to pack ${tmp_dir}/${venv}; check directory and file permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    echo "System files completed."

    # last step zip up the final product to the output path
    echo "Creating archive file as ${out_file} ..."
    if $( tar --directory=${tmp_dir} -cf ${out_file} ${venv}.sys.tar ${project_dir}.tar ); then
        echo "File ${out_file} completed."
    else
        echo "Error: failed to create ${out_file}; check directory and file permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    echo "Removing temporary files ..."
    if $(rm -rf ${tmp_dir}); then
        echo "Temporary files removed."
    else
        echo "Warning: unable to remove ${tmp_dir}"
    fi
}

# restores a virtualenv python project from a .venv file
unpack_venv() {
    # get some temporary working space
    tmp_dir=$(mktemp -d)
    if [ ! -d "${tmp_dir}" ]; then
        echo "Error: could not get temporary directory to work in."
        exit 1
    fi

    # untar the archive file into the temp directory
    echo "Unpacking ${venv_file} to ${tmp_dir} ..."
    if $( tar --directory=${tmp_dir} -xf ${venv_file} ); then
        echo "$venv_file unpacked."
    else
        echo "Error: could not unpack ${venv_file} to ${tmp_dir}. Check file and directory permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    # untar the project archive into the destination directory
    echo "Unpacking ${tmp_dir}/${project_dir}.tar to ${project_path} ..."
    if $( tar --directory=${project_base} -xf ${tmp_dir}/${project_dir}.tar ); then
        echo "${project_path} restored."

    else
        echo "Error: could not unpack ${project_dir}.tar to ${project_base}. Check file and directory permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    # untar the venv system archive into the temp folder so we can patch
    echo "Unpacking ${tmp_dir}/${venv}.sys.tar to ${tmp_dir} ..."
    if $( tar --directory=${tmp_dir} -xf ${tmp_dir}/${venv}.sys.tar ); then
        echo "${venv}.sys.tar unpacked."
    else
        echo "Error: could not unpack ${tmp_dir}/${venv}.sys.tar to ${tmp_dir}. Check file and directory permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    # check whether the python install locations are compatible
    check_architecture

    #patch the files
    echo "Patching paths in ${tmp_dir}/${venv} ..."
    files=$( grep ${venv_path_placer} -l --recursive --exclude=*.pyc ${tmp_dir}/${venv} )
    for file in $files; do
        echo "Patching ${file} ..."
        if $(sed -i"" -e "s:${venv_path_placer}:${venv_root}:g" ${file}); then
            echo "${file} patched."
        else
            echo "Error: could not patch ${file}."
            conditional_cleanup_on_error
            exit 1
        fi
    done
    files=$( grep ${project_path_placer} -l --recursive --exclude=*.pyc ${tmp_dir}/${venv} )
    for file in $files; do
        echo "Patching ${file} ..."
        if $(sed -i"" -e "s:${project_path_placer}:${project_base}:g" ${file}); then
            echo "${file} patched."
        else
            echo "Error: could not patch ${file}."
            conditional_cleanup_on_error
            exit 1
        fi
    done

    #now move the folder
    echo "Moving ${tmp_dir}/${venv} to ${venv_root} ..."
    if $( mv ${tmp_dir}/${venv} ${venv_root} ); then
        echo "${tmp_dir}/${venv} moved."
    else
        echo "Error: could not move ${tmp_dir}/${venv} to ${venv_root}. Check file and directory permissions."
        conditional_cleanup_on_error
        exit 1
    fi

    # fix up the symlinks in local/
    echo "Fixing local/ symlinks ..."
    rm ${venv_root}${venv}/local/bin && ln -s ${venv_root}${venv}/bin ${venv_root}${venv}/local/bin && \
    rm ${venv_root}${venv}/local/include && ln -s ${venv_root}${venv}/include ${venv_root}${venv}/local/include && \
    rm ${venv_root}${venv}/local/lib && ln -s ${venv_root}${venv}/lib ${venv_root}${venv}/local/lib
    if [ $? = 0 ]; then
        echo "local/ symlinks updated."
    else
        echo "Error: failed to update local/ symlinks."
        conditional_cleanup_on_error
        exit 1
    fi

    echo "Removing temporary files ..."
    if $(rm -rf ${tmp_dir}); then
        echo "Temporary files removed."
    else
        echo "Warning: unable to remove ${tmp_dir}"
    fi

    echo "virtualenv ${venv} restored."
}

# set tabs = 4
tabs 4

# parse out the options
OPTS=$(getopt -o cdfho:ry --long force,help,no-cleanup-on-error,outfile:,restore -- "$@")
if [[ $? -ne 0 ]]; then
    echo "Error: failed to parse command line options."
    exit 1
fi

eval set -- "$OPTS"
while true; do
    case "$1" in
        -c|--no-cleanup-on-error)
            no_clean_on_err=true
            shift
            ;;
        -d|--debug)
            debug=true
            shift
            ;;
        -f|--force)
            force=true
            shift
            ;;
        -h|--help)
            show_help
            ;;
        -o|--outfile)
            out_file="$2"
            shift; shift
            ;;
        -r|--restore)
            restore=true
            shift
            ;;
        -y|--no-prompt)
            no_prompt=true
            shift
            ;;
        --)
            shift
            if [ ! -z "$1" ]; then
                if [ "${restore}" = true ]; then
                    venv_file="$1"
                else
                    venv="$1"
                fi
            fi
            break
            ;;
        *)
            echo "Error: unknown option '${1}'"
            help 1
            ;;
    esac
done

# request the user to confirm the make command and exit on any
# choice other than yes.
confirm_pack() {
    echo "Create virtualenv package"
    echo "----------------------------------"
    echo "venv name: ${venv}"
    echo "venv path: ${venv_root}${venv}"
    echo "project path: ${project_path}"
    echo "package name: ${out_file}"
    echo
    read -p "Create venv package now (y/N)?" choice
    case "$choice" in
        y|Y) return;;
        *) exit 0;;
    esac
}

confirm_unpack() {
    echo "Restore virtualenv"
    echo "----------------------------------"
    echo "venv file: ${venv_file}"
    echo "venv name: ${venv}"
    echo "venv path: ${venv_root}${venv}"
    echo "project name: ${project_dir}"
    echo "project path: ${project_path}"
    echo
    read -p "Restore virtualenv now (y/N)?" choice
    case "$choice" in
        y|Y) return;;
        *) exit 0;;
    esac
}

echo "venvpack ${version}"
echo

ensure_prereqs
if [ "${restore}" = "true" ]; then
    # if we're restoring make sure we have a good venv file and
    # then get the project/venv names
    if [ ! -f "${venv_file}" ]; then
        echo "Error: file '${venv_file}' not found."
        exit 1
    fi
    get_names_from_file
    ensure_venv
    if [ "${no_prompt}" = "false" ]; then
        confirm_unpack
    fi
    unpack_venv

else
    ensure_venv

    # figure out the package name
    if [ -z "${out_file}" ]; then
        out_file="${venv}.venv"
    else
        if [ -d "$out_file" ]; then
            if [[ ${out_file} != "*/" ]]; then
                out_file="${out_file}/${venv}.venv"
            else
                out_file="${out_file}${venv}.venv"
            fi
        else
            if [[ ${out_file} != "*.*" ]]; then
                out_file="${out_file}.venv"
            fi
        fi
    fi
    if [ "${no_prompt}" = "false" ]; then
        confirm_pack
    fi
    pack_venv
fi
echo "Completed."
